[client]
port=3306

[mysqld]
##### 这两部操作可以解决mysql连接很慢的问题 #####
# 根据官方文档说明，如果你的mysql主机查询DNS很慢或是有很多客户端主机时会导致连接很慢，由于我们的开发机器是不能够连接外网的，
# 所以DNS解析是不可能完成的，从而也就明白了为什么连接那么慢了。同时，请注意在增加该配置参数后，mysql的授权表中的host字段就
# 不能够使用域名而只能够使用 ip地址了，因为这是禁止了域名解析的结果。

# 1.禁止域名解析
skip-host-cache

# 2.禁用dns解析，但是，这样不能在mysql的授权表中使用主机名了，只能使用IP。
skip-name-resolve=ON

# 数据库编号, 要具有唯一性, 不能跟其他数据库重复, 方便同步区分
server_id = 11

# mysql日志
log_bin = mysql-bin.log

# 中继日志：存储所有主库TP过来的binlog事件主库binlog：记录主库发生过的修改事件
relay-log = mysql-relay-bin.log

# binlog日志格式，mysql默认采用statement，建议使用 mixed(是statement和row模式的结合)
binlog_format = mixed

# 指定需要复制的数据库名
binlog_do_db = mydb
binlog_do_db = siam_admin

# 通用配置
innodb_file_per_table=ON
default-authentication-plugin=mysql_native_password
character-set-server=utf8mb4
collation-server=utf8mb4_general_ci
explicit_defaults_for_timestamp=true
lower_case_table_names=1
max_allowed_packet=128M

# 组复制配置
log-bin-index=mysql-bin.index
gtid_mode=ON
enforce-gtid-consistency=true
binlog_checksum=NONE
innodb_buffer_pool_size=4G

# 组复制数据必须存储在InnoDB事务存储引擎中，使用其它存储引擎可能导致组复制出错。
# 因此设置disabled_storage_engines禁用其它存储引擎。
disabled_storage_engines="MyISAM,BLACKHOLE,FEDERATED,ARCHIVE,MEMORY"

log_slave_updates=ON
master_info_repository=TABLE
relay_log_info_repository=TABLE

# 配置transaction_write_set_extraction指示服务器对于每个事务，必须收集写集并使用XXHASH64哈希算法编码。
# 从MySQL 8.0.2开始，此设置是默认设置，因此可以省略此行。
transaction_write_set_extraction=XXHASH64

# 配置group_replication_group_name告诉插件它正在加入或创建的组名为aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa。
# group_replication_group_name的值必须是有效的UUID。在二进制日志中为组复制事件设置GTID时，将在内部使用此UUID。
# 可以使用SELECT UUID()或Linux的uuidgen命令生成UUID。
loose-group_replication_group_name="fa64b6bb-26da-11ea-9b21-0242c0a84002"

# 配置group_replication_start_on_boot指示插件在服务器启动时不自动启动操作。
# 这在设置组复制时很重要，因为它确保可以在手动启动插件之前配置服务器。
# 配置成员后，可以将group_replication_start_on_boot设置为on，以便在服务器引导时自动启动组复制。
loose-group_replication_start_on_boot=off

# 配置group_replication_local_address告诉插件使用网络地址172.16.1.125和端口33061与组中的其它成员进行内部通信。
# 组复制将此地址用于涉及组通信引擎（XCom，Paxos变体）的远程实例的内部成员到成员连接。
# 此端口必须与用于客户端连接的端口不同，并且不得用于客户端应用程序。在运行组复制时，必须为组成员之间的内部通信保留它。
loose-group_replication_local_address= "112.74.58.15:53200"

# 配置group_replication_group_seeds设置组成员的IP和端口，这些成员称为种子成员。
# 建立连接后，组成员身份信息将列在performance_schema.replication_group_members中。
# 通常，group_replication_group_seeds列表包含每个组成员的group_replication_local_address的 ip:port，
# 但这不是强制性的，可以选择组成员的子集作为种子。
# 启动该组的服务器不使用此选项，因为它是初始服务器，负责引导组。
# 换句话说，引导该组的服务器上的任何现有数据都是用作下一个加入成员的数据。
# 第二个服务器上的任何缺失数据都从引导成员上的数据中复制，然后组扩展。
# 加入的第三个服务器可以要求这两个服务器中的任何一个作为捐赠者，数据被同步到新成员，然后该组再次扩展。
# 后续服务器在加入时重复此过程。
loose-group_replication_group_seeds= "112.74.58.15:53200,112.74.58.15:53201,112.74.58.15:53202"

# 配置group_replication_bootstrap_group指示插件是否引导该组。
# 此选项只能在一个服务器实例上使用，通常是第一次引导组时（或者在整个组关闭并重新备份的情况下）。
# 如果多次引导组，例如当多个服务器实例设置了此选项时，则可以创建一个人工脑裂的情景，存在两个具有相同名称的不同组。
loose-group_replication_bootstrap_group=off