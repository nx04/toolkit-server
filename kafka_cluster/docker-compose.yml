version: '3.1'

services:
  zoo1:
    image: zookeeper:3.5.6
    restart: unless-stopped
    hostname: zoo1
    environment:
      ZOO_MY_ID: 1
    ports:
      - "52181:2181"
    container_name: zookeeper1
  zoo2:
    image: zookeeper:3.5.6
    restart: unless-stopped
    hostname: zoo2
    environment:
      ZOO_MY_ID: 2
    ports:
      - "52182:2181"
    container_name: zookeeper2
  kafka1:
    image: wurstmeister/kafka:2.12-2.4.0
    ports:
      - "59092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 112.74.58.15
      KAFKA_ADVERTISED_PORT: 59092
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # 默认备份份数，仅指自动创建的topics
      KAFKA_CREATE_TOPICS: "MUSIC_SCORE:5:1"
    depends_on:
      - zoo1
      - zoo2
    container_name: kafka_c1


  kafka2:
    image: wurstmeister/kafka:2.12-2.4.0
    ports:
      - "59093:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 112.74.58.15
      KAFKA_ADVERTISED_PORT: 59093
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "MUSIC_SCORE:5:1"
    depends_on:
      - zoo1
      - zoo2
    container_name: kafka_c2
  
  kafka-manager:
    image: sheepkiller/kafka-manager:latest
    restart: always
    container_name: kafa-manager_c
    hostname: kafka-manager
    ports:
      - "59000:9000"
    depends_on:
      - kafka1
      - kafka2
      - zoo1
      - zoo2
    environment:
      ZK_HOSTS: zoo1:2181,zoo2:2181
      KAFKA_BROKERS: kafka1:59092,kafka2:59093
      APPLICATION_SECRET: letmein
      KM_ARGS: -Djava.net.preferIPv4Stack=true